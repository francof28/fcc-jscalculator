{"version":3,"sources":["Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Calculator","React","useState","expression","setExpression","answer","setAnswer","display","symbol","prevValue","test","length","newValue","slice","count","i","isNaN","valArr","split","console","log","JSON","stringify","lastNumber","replace","calculate","eval","clear","className","type","value","id","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59e473be.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Calculator.css';\r\n\r\nfunction Calculator () {\r\n    const [expression, setExpression] = React.useState(\"\");\r\n    const [answer, setAnswer] = React.useState(expression);\r\n\r\n    /*\r\n        const newVal = e.target.value\r\n        \r\n        switch (newVal) {\r\n            case 'clear': {\r\n                this.setState({\r\n                    currentNum: '0',\r\n                    prevNum: undefined,\r\n                    operation: undefined,\r\n                    result: '0',\r\n                    calcDisplay: '0',\r\n                })\r\n                break;\r\n            }\r\n            case 'dot': {\r\n                if(!this.state.currentNum.includes('.')) {\r\n                    this.setState({\r\n                        currentNum: this.state.currentNum + '.',\r\n                        calcDisplay: this.state.calcDisplay + '.'\r\n                    })\r\n                }\r\n                break;\r\n            }\r\n            case 'div': {\r\n                if(!this.state.operation){\r\n                    this.setState({\r\n                        prevNum: this.state.currentNum,\r\n                        currentNum: '0',\r\n                        operation: '/',\r\n                        calcDisplay: this.state.calcDisplay + '/',\r\n                        result: '/'\r\n                    })\r\n                }\r\n                break;\r\n            }\r\n            case 'mult': {\r\n                if(!this.state.operation){\r\n                    this.setState({\r\n                        prevNum: this.state.currentNum,\r\n                        currentNum: '0',\r\n                        operation: '*',\r\n                        calcDisplay: this.state.calcDisplay + '*',\r\n                        result: '*'\r\n                    })\r\n                }\r\n                break;\r\n            }\r\n            case 'rest': {\r\n                if(!this.state.operation){\r\n                    this.setState({\r\n                        prevNum: this.state.currentNum,\r\n                        currentNum: '0',\r\n                        operation: '-',\r\n                        calcDisplay: this.state.calcDisplay + '-',\r\n                        result: '-'\r\n                    })\r\n                }\r\n                break;\r\n            }\r\n            case 'add': {\r\n                if(!this.state.operation){\r\n                    this.setState({\r\n                        prevNum: this.state.currentNum,\r\n                        currentNum: '0',\r\n                        operation: '+',\r\n                        calcDisplay: this.state.calcDisplay + '+',\r\n                        result: '+'\r\n                    })\r\n                }\r\n                break;\r\n            }\r\n            case 'equal': {\r\n                const evaluated = eval(`${this.state.prevNum} ${this.state.operation} ${this.state.currentNum}`)\r\n                this.setState({\r\n                        prevNum: this.state.currentNum,\r\n                        currentNum: `${evaluated}`,\r\n                        operation: undefined,\r\n                        result: evaluated\r\n                    })\r\n                break;\r\n            }\r\n            default: {\r\n                if(!Number.isNaN(Number(newVal))) {\r\n                    if(this.state.currentNum === '0'){\r\n                        this.setState({\r\n                            currentNum: newVal,\r\n                            calcDisplay: newVal,\r\n                            result: newVal\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            currentNum: this.state.currentNum + newVal,\r\n                            calcDisplay: this.state.calcDisplay + newVal,\r\n                            result: newVal\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n\r\n        }*/\r\n\r\n        function display(symbol) {\r\n            setExpression((prevValue) => {\r\n              if (\r\n                /[+*-/]/.test(symbol) &&\r\n                /[+*-/]/.test(prevValue[prevValue.length - 1])\r\n              ) {\r\n                let newValue;\r\n                if (/[-]/.test(symbol)) {\r\n                  newValue = prevValue.slice(0, prevValue.length) + symbol;\r\n                } else {\r\n                  let count = 0;\r\n                  for (let i = 0; i < prevValue.length; i++) {\r\n                    if (isNaN(+prevValue[i])) {\r\n                      count++;\r\n                    } else {\r\n                      count = 0;\r\n                    }\r\n                  }\r\n                  newValue = prevValue.slice(0, prevValue.length - count) + symbol;\r\n                }\r\n        \r\n                setExpression(newValue);\r\n              } else {\r\n                if (prevValue) {\r\n                  prevValue = prevValue + \"\";\r\n                  let valArr = prevValue.split(/[+/*-]/g);\r\n                  console.log(\"valArr \" + JSON.stringify(valArr));\r\n                  let lastNumber = valArr[valArr.length - 1];\r\n                  if (!isNaN(lastNumber) && /[.]/.test(lastNumber) && symbol === \".\") {\r\n                    console.log(\"symbol = empty \");\r\n                    symbol = \"\";\r\n                  }\r\n                }\r\n        \r\n                setExpression(\r\n                  (prevValue + symbol).replace(/^0/g, \"\").replace(/\\.+/g, \".\")\r\n                );\r\n              }\r\n            });\r\n        \r\n            setAnswer((prevValue) =>\r\n              (prevValue + symbol).replace(/^0/g, \"\").replace(/\\.+/g, \".\")\r\n            );\r\n          }\r\n        \r\n          function calculate() {\r\n            setAnswer(eval(expression));\r\n            setExpression(eval(expression));\r\n          }\r\n          \r\n          function clear() {\r\n            setExpression(\"\");\r\n            setAnswer(0);\r\n          }\r\n\r\n    return (\r\n            <div className=\"calculator\">\r\n                <div className=\"screen\">\r\n                    <input className=\"result\" type=\"text\" value={answer} id=\"display\"/>\r\n                </div>\r\n                <button className=\"button clear\" onClick={clear} id=\"clear\">AC</button>\r\n                <button className=\"button div\" onClick={() => display(\"/\")} id=\"divide\">/</button>\r\n                <button className=\"button mult\" onClick={() => display(\"*\")} id=\"multiply\">x</button>\r\n                <button className=\"button seven\" onClick={() => display(\"7\")} id=\"seven\">7</button>\r\n                <button className=\"button eight\" onClick={() => display(\"8\")} id=\"eight\">8</button>\r\n                <button className=\"button nine\" onClick={() => display(\"9\")} id=\"nine\">9</button>\r\n                <button className=\"button rest\" onClick={() => display(\"-\")} id=\"subtract\">-</button>\r\n                <button className=\"button four\" onClick={() => display(\"4\")} id=\"four\">4</button>\r\n                <button className=\"button five\" onClick={() => display(\"5\")} id=\"five\">5</button>\r\n                <button className=\"button six\" onClick={() => display(\"6\")} id=\"six\">6</button>\r\n                <button className=\"button add\" onClick={() => display(\"+\")} id=\"add\">+</button>\r\n                <button className=\"button one\" onClick={() => display(\"1\")} id=\"one\">1</button>\r\n                <button className=\"button two\" onClick={() => display(\"2\")} id=\"two\">2</button>\r\n                <button className=\"button three\" onClick={() => display(\"3\")} id=\"three\">3</button>\r\n                <button className=\"button equal\" onClick={calculate} id=\"equals\">=</button>\r\n                <button className=\"button zero\" onClick={() => display(\"0\")} id=\"zero\">0</button>\r\n                <button className=\"button dot\" onClick={() => display(\".\")} id=\"decimal\">.</button>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Calculator;","import './App.css';\nimport Calculator from './Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>JavaScript Calculator</h1>\n        <Calculator />\n        <p className=\"Cred\">by francof28</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}